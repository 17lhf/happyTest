<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.basic</groupId>
    <artifactId>happyTest</artifactId>
    <version>1.0.2-SNAPSHOT</version>
    <name>happyTest</name>
    <description>happyTest</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>

        <!-- 包含了工具类，流的实现， 文件过滤器，文件比较器，endian转换类，还有其他更多的内容 -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.11.0</version>
        </dependency>

        <!--
            MyBatis-Plus 1.x 对应 MyBatis 3.3.x
            MyBatis-Plus 2.x 对应 MyBatis 3.4.x
            MyBatis-Plus 3.x 对应 MyBatis 3.5.x
            ——来自CSDN文档库
        -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.5.3.1</version>
        </dependency>

        <!-- BC库，密码学相关的轻量级API库 -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.70</version>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId><!-- 证书请求啥的都在这个包里 -->
            <version>1.70</version>
        </dependency>

        <!--
        解决读取配置文件数据时，（参考YmlConfig.java文件）配置类上面会提示：springboot configuration annotation proessor not configured 的问题
        导入依赖包后会变成提示：Re-run Spring Boot Configuration Annotation Processor to update generated metadata
        这时候可以不用去管，该提示影响代码执行。只是提醒用户，进行必要的重新编译。再当文件进行了有效的更新时，该提示也会消失。
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId><!-- 阿里巴巴出的json处理包 -->
            <version>1.2.79</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId> <!-- jackson的json处理包 -->
            <version>2.13.2</version>
        </dependency>

        <!-- 一个开源的多格式1D/2D条形码图像处理库，用Java实现，并具有其他语言的端口 -->
        <!-- 工具源码地址：https://github.com/zxing/zxing -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.5.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.0</version>
        </dependency>

        <!-- 调用其他服务时使用的工具 -->
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-core</artifactId>
            <version>12.0</version>
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-jackson</artifactId>
            <version>12.0</version>
        </dependency>

        <dependency>  <!-- 实现邮箱验证码发送的包 -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-email</artifactId>
            <version>1.5</version>
        </dependency>

        <!-- thymeleaf依赖包，模板引擎 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- Spring Boot Actuator 模块提供了生产级别的功能，比如健康检查，审计，指标收集，HTTP 跟踪等，帮助我们监控和管理Spring Boot 应用。 -->
        <!-- 文档：https://docs.spring.io/spring-boot/docs/3.2.0-SNAPSHOT/actuator-api/htmlsingle/#overview -->
        <!-- todo 待研究 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

    </dependencies>

    <build>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.0</version>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- 一个用于mvn生命周期的测试阶段的插件，可以通过一些参数设置方便的在testNG或junit下对测试阶段进行自定义 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <configuration>
                    <!--
                        默认情况下，Surefire 插件将自动包含具有以下通配符模式的所有测试类：
                        "**/Test*.java"- 包括其所有子目录和所有以“Test”开头的 Java 文件名。
                        "**/*Test.java"- 包括其所有子目录和所有以“Test”结尾的 Java 文件名。
                        "**/*Tests.java"- 包括其所有子目录和所有以“Tests”结尾的 Java 文件名。
                        "**/*TestCase.java"- 包括其所有子目录和所有以“TestCase”结尾的 Java 文件名。
                        如果测试类不遵循默认通配符模式，则才需要额外包含以下文件
                    -->
                    <includes>
                        JaCoCoInstanceT.java
                    </includes>
                    <excludes>
                        <exclude>**/Test*.java</exclude>
                        <exclude>**/*Test.java</exclude>
                        <exclude>**/*Tests.java</exclude>
                        <exclude>**/*TestCase.java</exclude>
                    </excludes>
                    <!-- 注意，如果想要输出代码覆盖率报告，则此处应该为false -->
                    <!-- 跳过测试阶段 -->
                    <skipTests>true</skipTests>
                    <!-- 参数 forkCount 定义 Surefire 为执行测试而同时生成的 JVM 进程的最大数量 -->
                    <!-- JaCoCo要求不能为0，此处设置的其实是默认值 -->
                    <forkCount>1</forkCount>
                    <!--
                        Maven运行测试用例时，是通过调用maven的surefire插件并fork一个子进程来执行用例的。(旧版本兼容用这个属性，新版本用的是reuseForks标签)
                        forkMode属性中指明是要为每个测试创建一个进程，还是所有测试在同一个进程中完成。
                        选择正确的分叉策略和并行执行设置可能会对内存要求和构建系统的执行时间产生重大影响。
                        官方说明：https://maven.apache.org/components/surefire-archives/surefire-2.19/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html
                        pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归
                        once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
                        always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。
                    -->
                    <!-- JaCoCo要求不能是Never，此处设置的其实是默认值 -->
                    <forkMode>once</forkMode>
                </configuration>
            </plugin>

            <!-- 使得maven打包时，也会将空文件夹一并打包，不然空文件夹默认是会被忽略 todo 实际测试发现无效 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <!-- 注意:这个参数maven-war-plugin 2.4及以上的版本才支持 -->
                    <includeEmptyDirectories>true</includeEmptyDirectories>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.11</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id> <!-- 唯一标识这个特定的执行。这主要用于在需要的地方引用或区分多个执行。 -->
                        <phase>initialize</phase> <!-- 定义应该在哪个生命周期阶段执行该插件的目标 -->
                        <goals> <!-- 列出应该执行的目标 -->
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!--
                                字段的值应该是使用标准通配符语法相对于目录target/classes/的已编译类的类路径（而不是程序包名称）
                                *   Match zero or more characters
                                **  Match zero or more directories
                                ?   Match a single character
                            -->
                            <includes> <!-- 只准备扫描符合匹配规则的内容 -->
                                com/basic/happytest/modules/jaCoCo/*
                            </includes>
                            <destFile><!-- 这里其实是默认值 -->
                                ${project.build.directory}/jacoco.exec
                            </destFile>
                            <skip> <!-- 此处该配置使用的是默认值 -->
                                false
                            </skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>merge</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>merge</goal>
                        </goals>
                        <configuration>
                            <fileSets> <!-- 此处该配置使用的是默认值 -->
                                <fileSet>
                                    <directory>${project.build.directory}</directory>
                                    <includes>
                                        <include>*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <skip> <!-- 此处该配置使用的是默认值 -->
                                false
                            </skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${project.build.directory}/jacoco
                            </outputDirectory>
                            <dataFile> <!-- 默认值 -->
                                ${project.build.directory}/jacoco.exec
                            </dataFile>
                            <!--
                                指定只准备生成符合匹配规则的内容的报告
                                不指定的话默认报告包含全部类（无视surefire、prepare-agent等其他的限制范围）
                            -->
                            <includes>
                                com/basic/happytest/modules/jaCoCo/*
                            </includes>
                            <footer> <!-- 会显示在报告页面的最下面 -->
                                Footer text used in HTML report pages.
                            </footer>
                            <formats>
                                HTML
                            </formats>
                            <outputEncoding> <!-- 默认值 -->
                                UTF-8
                            </outputEncoding>
                            <sourceEncoding> <!-- 默认值 -->
                                UTF-8
                            </sourceEncoding>
                            <title> <!-- 默认值 -->
                                ${project.name}
                            </title>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-check</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <includes> <!-- 只检查符合匹配规则的内容的项，不选的话会扫描全部，无视其他配置的限制范围 -->
                                com/basic/happytest/modules/jaCoCo/*
                            </includes>
                            <haltOnFailure> <!-- 默认值 -->
                                true
                            </haltOnFailure>
                            <rules>
                                <rule>
                                    <element>CLASS</element>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.80</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
